# coding=utf-8
"""Test repomd repository generated by yum distributor."""
from __future__ import unicode_literals

from pulp_smash import api
from pulp_smash.compat import urljoin
from pulp_smash.constants import REPOSITORY_PATH
from pulp_smash.tests.rpm.api_v2.utils import gen_repo, gen_distributor, \
    BaseRepoMDTestCase, xml_handler


class RepoMDTestCase(BaseRepoMDTestCase):
    """Test repomd.xml generation via yum distributor."""

    @classmethod
    def setUpClass(cls):
        """Creates, publishes repo and fetches repomd.xml."""
        super(RepoMDTestCase, cls).setUpClass()

        cls.tasks = {}
        cls.errata = {}

        client = api.Client(cls.cfg, api.json_handler)

        # Create a repository for use by the test.
        repo = client.post(REPOSITORY_PATH, gen_repo())
        cls.resources.add(repo['_href'])

        # add yum distributor to the repo
        distribute = client.post(
            urljoin(repo['_href'], 'distributors/'),
            gen_distributor())

        # ask for it to be published
        client.post(
            urljoin(repo['_href'], 'actions/publish/'),
            {'id': distribute['id']})

        # fetch the repomd.xml
        repo_url = urljoin('/pulp/repos/',
                           distribute['config']['relative_url'])
        repomd_url = urljoin(repo_url, 'repodata/repomd.xml')

        client = api.Client(cls.cfg, xml_handler)
        cls.repomd_tree = client.get(repomd_url)

    def test_repomd_sanity(self):
        """Test basic top-level structure of the generated repomd.xml file."""
        namespace = 'http://linux.duke.edu/metadata/repo'
        # should have one top-level <repomd>
        self.assertEqual('{%s}repomd' % namespace, self.repomd_tree.tag)

        data_elems = self.repomd_tree.findall('{%s}data' % namespace)
        data_types = [elem.get('type') for elem in data_elems]
        data_types.sort()

        # should have generated these types of data
        self.assertEqual(
            ['filelists', 'group', 'other', 'primary', 'updateinfo'],
            data_types)
